name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  GlobalPassowrdSecret: GlobalPassword
  DevKeyVaultName: Team3KeyVault
  ProdKeyVaultName: ProdTeam3KeyVault
  ProdWebAppName: ProdTeam3WebApp
  ProductionResourceGroupName: GitHubDevOps-2020-09-03-team-03-prod
jobs:
   
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test ${{ github.workspace }}/AnimalAdoption.Web.Portal.UnitTests --no-restore --verbosity normal

    - name: Setup Nuget.exe
      # You may pin to the exact commit or the version.
      # uses: warrenbuckley/Setup-Nuget@09c4593220c119ed8d6a811954d72bddd986e29a
      uses: warrenbuckley/Setup-Nuget@v1

    - name: Package up logic project as a NuGet package
      run: dotnet pack ${{ github.workspace }}/AnimalAdoption.Common.Logic --configuration Release --no-build

    - name: Add source to Nuget
      run: nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/Team3Tigers/index.json" -UserName edwahn -Password ${{ secrets.PAT_GPR_READWRITEDELETE }}

    - name: Nuget SetAPIKey
      run: nuget setApiKey ${{ secrets.PAT_GPR_READWRITEDELETE }} -Source "GitHub"

    - name: Nuget Push
      run: nuget push ${{ github.workspace }}\AnimalAdoption.Common.Logic\bin\Release\*.nupkg -Source "GitHub" -SkipDuplicate

    - name: Publish
      run: dotnet publish ${{ github.workspace }}/AnimalAdoption.Web.Portal/AnimalAdoption.Web.Portal.csproj --output ./webportal --no-build --configuration Release
  
    - name: Publish
      run: dotnet publish ${{ github.workspace }}/AnimalAdoption.Web.Portal.FunctionalTests/AnimalAdoption.Web.Portal.FunctionalTests.csproj --output ./functionaltest --no-build --configuration Release

    - name: List out directory contents
      run: |
        echo "Listing the contents of the GitHub workspace directory"
        ls ${{ github.workspace }}

        echo "Recursively listing all contents of the current directory"
        ls -R

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.1.4
      with:
        # Artifact name
        name: drop
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{ github.workspace }}/webportal
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: error

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.1.4
      with:
        # Artifact name
        name: functionaltest
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{ github.workspace }}/functionaltest
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: error

    - name: Upload a ARM Template
      uses: actions/upload-artifact@v2.1.4
      with:
        # Artifact name
        name: drop
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{ github.workspace }}/Deploy.json
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: error
  
  release1:  
      runs-on: windows-latest
      needs: build
      steps:
        - name: Download a Build Artifact
          uses: actions/download-artifact@v2.0.5
          with:
          # Artifact name
            name: drop
        - name: Azure Login
          uses: Azure/login@v1
          with:
            # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
            creds: ${{secrets.AZURECREDENTIALSJONO}}
            # Set this value to true to enable Azure PowerShell Login in addition to Az CLI login
        - name: Azure WebApp
          uses: Azure/webapps-deploy@v2
          with:
            app-name: linApp
            package: . # optional, default is .

  release2:  
      runs-on: windows-latest
      needs: build
      steps:
        - name: Download a Build Artifact
          uses: actions/download-artifact@v2.0.5
          with:
          # Artifact name
            name: drop
        - name: Azure Login
          uses: Azure/login@v1
          with:
            # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
            creds: ${{secrets.AZURECREDENTIALSJONO}}
            # Set this value to true to enable Azure PowerShell Login in addition to Az CLI login
        - name: Azure WebApp
          uses: Azure/webapps-deploy@v2
          with:
            app-name: EliaWebApp
            package: . # optional, default is .
  release3:  
      runs-on: windows-latest
      needs: build
      env: 
        SimulatedFailureChance: 0
      steps:
        - name: Download a Build Artifact
          uses: actions/download-artifact@v2.0.5
          with:
          # Artifact name
            name: drop
            
        - name: Azure Login
          uses: Azure/login@v1
          with:
            # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
            creds: ${{secrets.AZURECREDENTIALSJONO}}
            # Set this value to true to enable Azure PowerShell Login in addition to Az CLI login
        - name: Azure WebApp
          uses: Azure/webapps-deploy@v2
          with:
            app-name: JonoApp
            package: . # optional, default is .
            
        - name: Azure key vault - Get Secrets
          uses: Azure/get-keyvault-secrets@v1
          with:
            # Name of the azure key vault
            keyvault: ${{env.DevKeyVaultName}}
            # Name of the secret to be fetched
            secrets: ${{env.GlobalPassowrdSecret}}
        
        - name: Azure App Service Settings
          uses: Azure/appservice-settings@v1
          with:
            # Name of the Azure Web App
            app-name: JonoApp
            # Name of an existing slot other than the production slot. Default value is production
            # slot-name: # optional
            # Application settings using the JSON syntax set as value of secret variable: APP_SETTINGS
            app-settings-json: |
              [
                {
                  "name": "ANCM_ADDITIONAL_ERROR_PAGE_LINK",
                  "value": "https://JonoApp.scm.azurewebsites.net/detectors?type=tools&name=eventviewer",
                  "slotSetting": false
                },
                {
                  "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                  "value": "${{secrets.INSTRUMENTATIONKEYJONO}}",
                  "slotSetting": false
                },
                {
                  "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                  "value": "InstrumentationKey=${{secrets.INSTRUMENTATIONKEYJONO}};IngestionEndpoint=https://australiaeast-0.in.applicationinsights.azure.com/",
                  "slotSetting": false
                },
                {
                  "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
                  "value": "~2",
                  "slotSetting": false
                },
                {
                  "name": "GlobalPassword",
                  "value": "${{env.GlobalPassword}}",
                  "slotSetting": false
                },
                {
                  "name": "SimulatedFailureChance",
                  "value": "${{env.SimulatedFailureChance}}",
                  "slotSetting": false
                },
                {
                  "name": "XDT_MicrosoftApplicationInsights_Mode",
                  "value": "default",
                  "slotSetting": false
                }
              ]
              
            # Connection Strings using the JSON syntax set as value of secret variable: CONNECTION_STRINGS
            # connection-strings-json: # optional
            # General configuration settings using dictionary syntax - Key Value pairs
            # general-settings-json: # optional

  deployProdARM:
    needs: [release1,release2,release3]
    runs-on: ubuntu-latest
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.0.5
        with:
        # Artifact name
          name: drop
      #- name: Azure Login
      #  uses: Azure/login@v1
      #  with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
      #    creds: ${{secrets.PRODAZURECREDENTIALSJONO}}
      - name: Azure Resource Manager (ARM) Template Deployment
        # You may pin to the exact commit or the version.
        # uses: whiteducksoftware/azure-arm-action@93cecbb4200bb6171789ebd3566cda22ecd381f4
        uses: whiteducksoftware/azure-arm-action@v3.2
        with:
          # Paste output of `az ad sp create-for-rbac -o json` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{secrets.PRODAZURECREDENTIALSJONO}}
          # Provide the name of a resource group.
          resourceGroupName: ${{env.ProductionResourceGroupName}}
          # Specify the path to the Azure Resource Manager template.
          templateLocation: ./Deploy.json
          # Specifies the name of the resource group deployment to create.
          deploymentName: ARMDeployment
          # Incremental (only add resources to resource group) or Complete (remove extra resources from resource group).
          deploymentMode: Incremental
          # Specify either path to the Azure Resource Manager parameters file or pass them as 'key1=value1;key2=value2;...'.
          parameters: |
            resourceLocation=australiaeast
            tenantGuid=${{secrets.TENANT_ID}}
            appServicePlanName=ProdAzureSprintPlan
            keyVaultName=${{env.ProdKeyVaultName}} 
            webAppName=${{env.ProdWebAppName}}
            resourceGroupServicePrincipalManagedApplicationObjectId=${{secrets.PROD_APPSERVICE_OBJECTID}}
          # Specify either path to the Azure Resource Manager override parameters file or pass them as 'key1=value1;key2=value2;...'.
          #overrideParameters: # optional

  releaseToProd:  
      runs-on: windows-latest
      needs: deployProdARM
      env: 
        SimulatedFailureChance: 0
      steps:
        - name: Download a Build Artifact
          uses: actions/download-artifact@v2.0.5
          with:
          # Artifact name
            name: drop
            
        - name: Azure Login
          uses: Azure/login@v1
          with:
            # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
            creds: ${{secrets.PRODAZURECREDENTIALSJONO}}
            # Set this value to true to enable Azure PowerShell Login in addition to Az CLI login
        - name: Azure WebApp
          uses: Azure/webapps-deploy@v2
          with:
            app-name: ${{env.ProdWebAppName}}
            package: . # optional, default is .
            
        - name: Azure key vault - Get Secrets
          uses: Azure/get-keyvault-secrets@v1
          with:
            # Name of the azure key vault
            keyvault: ${{env.ProdKeyVaultName}}
            # Name of the secret to be fetched
            secrets: ${{env.GlobalPassowrdSecret}}
        
        - name: Azure App Service Settings
          uses: Azure/appservice-settings@v1
          with:
            # Name of the Azure Web App
            app-name: ${{env.ProdWebAppName}}
            # Name of an existing slot other than the production slot. Default value is production
            # slot-name: # optional
            # Application settings using the JSON syntax set as value of secret variable: APP_SETTINGS
            app-settings-json: |
              [
                {
                  "name": "ANCM_ADDITIONAL_ERROR_PAGE_LINK",
                  "value": "https://JonoApp.scm.azurewebsites.net/detectors?type=tools&name=eventviewer",
                  "slotSetting": false
                },
                {
                  "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                  "value": "${{secrets.INSTRUMENTATIONKEYJONO}}",
                  "slotSetting": false
                },
                {
                  "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                  "value": "InstrumentationKey=${{secrets.INSTRUMENTATIONKEYJONO}};IngestionEndpoint=https://australiaeast-0.in.applicationinsights.azure.com/",
                  "slotSetting": false
                },
                {
                  "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
                  "value": "~2",
                  "slotSetting": false
                },
                {
                  "name": "GlobalPassword",
                  "value": "${{env.GlobalPassword}}",
                  "slotSetting": false
                },
                {
                  "name": "SimulatedFailureChance",
                  "value": "${{env.SimulatedFailureChance}}",
                  "slotSetting": false
                },
                {
                  "name": "XDT_MicrosoftApplicationInsights_Mode",
                  "value": "default",
                  "slotSetting": false
                }
              ]
 
